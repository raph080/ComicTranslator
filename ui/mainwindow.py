# -*- coding: utf-8 -*-

################################################################################
## Form generated from reading UI file 'mainwindow.ui'
##
## Created by: Qt User Interface Compiler version 6.6.0
##
## WARNING! All changes made in this file will be lost when recompiling UI file!
################################################################################

from PySide6.QtCore import (QCoreApplication, QDate, QDateTime, QLocale,
    QMetaObject, QObject, QPoint, QRect,
    QSize, QTime, QUrl, Qt)
from PySide6.QtGui import (QAction, QBrush, QColor, QConicalGradient,
    QCursor, QFont, QFontDatabase, QGradient,
    QIcon, QImage, QKeySequence, QLinearGradient,
    QPainter, QPalette, QPixmap, QRadialGradient,
    QTransform)
from PySide6.QtWidgets import (QApplication, QGraphicsView, QMainWindow, QMenu,
    QMenuBar, QSizePolicy, QSplitter, QStackedWidget,
    QStatusBar, QToolBar, QVBoxLayout, QWidget)

from blankwidget import BlankWidget
from paintwidget import PaintWidget
from resources import resources_rc

class Ui_MainWindow(object):
    def setupUi(self, MainWindow):
        if not MainWindow.objectName():
            MainWindow.setObjectName(u"MainWindow")
        MainWindow.resize(714, 553)
        MainWindow.setToolButtonStyle(Qt.ToolButtonIconOnly)
        self.actionPreviousCell = QAction(MainWindow)
        self.actionPreviousCell.setObjectName(u"actionPreviousCell")
        icon = QIcon()
        icon.addFile(u":/circle-left.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionPreviousCell.setIcon(icon)
        self.actionNextCell = QAction(MainWindow)
        self.actionNextCell.setObjectName(u"actionNextCell")
        icon1 = QIcon()
        icon1.addFile(u":/circle-right.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionNextCell.setIcon(icon1)
        self.actionComposeLayers = QAction(MainWindow)
        self.actionComposeLayers.setObjectName(u"actionComposeLayers")
        self.actionComposeLayers.setCheckable(True)
        icon2 = QIcon()
        icon2.addFile(u":/layer-group.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionComposeLayers.setIcon(icon2)
        self.actionRemoveText = QAction(MainWindow)
        self.actionRemoveText.setObjectName(u"actionRemoveText")
        icon3 = QIcon()
        icon3.addFile(u":/text-slash.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionRemoveText.setIcon(icon3)
        self.actionEditBlank = QAction(MainWindow)
        self.actionEditBlank.setObjectName(u"actionEditBlank")
        self.actionEditBlank.setCheckable(True)
        icon4 = QIcon()
        icon4.addFile(u":/border-all.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionEditBlank.setIcon(icon4)
        self.actionZoomIn = QAction(MainWindow)
        self.actionZoomIn.setObjectName(u"actionZoomIn")
        icon5 = QIcon()
        icon5.addFile(u":/magnifying-glass-plus.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionZoomIn.setIcon(icon5)
        self.actionZoomOut = QAction(MainWindow)
        self.actionZoomOut.setObjectName(u"actionZoomOut")
        icon6 = QIcon()
        icon6.addFile(u":/magnifying-glass-minus.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionZoomOut.setIcon(icon6)
        self.actionPaintMask = QAction(MainWindow)
        self.actionPaintMask.setObjectName(u"actionPaintMask")
        self.actionPaintMask.setCheckable(True)
        icon7 = QIcon()
        icon7.addFile(u":/paint-brush-fine.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionPaintMask.setIcon(icon7)
        self.actionEraseMask = QAction(MainWindow)
        self.actionEraseMask.setObjectName(u"actionEraseMask")
        self.actionEraseMask.setCheckable(True)
        icon8 = QIcon()
        icon8.addFile(u":/eraser.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionEraseMask.setIcon(icon8)
        self.actionDiscard = QAction(MainWindow)
        self.actionDiscard.setObjectName(u"actionDiscard")
        icon9 = QIcon()
        icon9.addFile(u":/trash-xmark.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionDiscard.setIcon(icon9)
        self.actionUndo = QAction(MainWindow)
        self.actionUndo.setObjectName(u"actionUndo")
        icon10 = QIcon()
        icon10.addFile(u":/rotate-left.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionUndo.setIcon(icon10)
        self.actionRedo = QAction(MainWindow)
        self.actionRedo.setObjectName(u"actionRedo")
        icon11 = QIcon()
        icon11.addFile(u":/rotate-right.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionRedo.setIcon(icon11)
        self.actionAutoTextRemovalAndBlankAlignment = QAction(MainWindow)
        self.actionAutoTextRemovalAndBlankAlignment.setObjectName(u"actionAutoTextRemovalAndBlankAlignment")
        self.actionAutoTextRemovalAndBlankAlignment.setCheckable(True)
        icon12 = QIcon()
        icon12.addFile(u":/wand-magic-sparkles.svg", QSize(), QIcon.Normal, QIcon.Off)
        self.actionAutoTextRemovalAndBlankAlignment.setIcon(icon12)
        self.actionLoad = QAction(MainWindow)
        self.actionLoad.setObjectName(u"actionLoad")
        self.actionSave = QAction(MainWindow)
        self.actionSave.setObjectName(u"actionSave")
        self.actionall = QAction(MainWindow)
        self.actionall.setObjectName(u"actionall")
        self.actionmodification_only = QAction(MainWindow)
        self.actionmodification_only.setObjectName(u"actionmodification_only")
        self.actionExportComposition = QAction(MainWindow)
        self.actionExportComposition.setObjectName(u"actionExportComposition")
        self.actionExportComposition.setCheckable(True)
        self.actionExportModification = QAction(MainWindow)
        self.actionExportModification.setObjectName(u"actionExportModification")
        self.actionExportModification.setCheckable(True)
        self.centralwidget = QWidget(MainWindow)
        self.centralwidget.setObjectName(u"centralwidget")
        self.verticalLayout = QVBoxLayout(self.centralwidget)
        self.verticalLayout.setObjectName(u"verticalLayout")
        self.splitter = QSplitter(self.centralwidget)
        self.splitter.setObjectName(u"splitter")
        self.splitter.setOrientation(Qt.Horizontal)
        self.graphicsView = QGraphicsView(self.splitter)
        self.graphicsView.setObjectName(u"graphicsView")
        self.splitter.addWidget(self.graphicsView)
        self.stackedWidget = QStackedWidget(self.splitter)
        self.stackedWidget.setObjectName(u"stackedWidget")
        self.blankWidget = BlankWidget()
        self.blankWidget.setObjectName(u"blankWidget")
        self.stackedWidget.addWidget(self.blankWidget)
        self.paintWidget = PaintWidget()
        self.paintWidget.setObjectName(u"paintWidget")
        self.stackedWidget.addWidget(self.paintWidget)
        self.splitter.addWidget(self.stackedWidget)

        self.verticalLayout.addWidget(self.splitter)

        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QMenuBar(MainWindow)
        self.menubar.setObjectName(u"menubar")
        self.menubar.setGeometry(QRect(0, 0, 714, 36))
        self.menuFile = QMenu(self.menubar)
        self.menuFile.setObjectName(u"menuFile")
        self.menuExport = QMenu(self.menuFile)
        self.menuExport.setObjectName(u"menuExport")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QStatusBar(MainWindow)
        self.statusbar.setObjectName(u"statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.toolBar = QToolBar(MainWindow)
        self.toolBar.setObjectName(u"toolBar")
        MainWindow.addToolBar(Qt.TopToolBarArea, self.toolBar)

        self.menubar.addAction(self.menuFile.menuAction())
        self.menuFile.addAction(self.actionLoad)
        self.menuFile.addAction(self.actionSave)
        self.menuFile.addAction(self.menuExport.menuAction())
        self.menuExport.addAction(self.actionExportComposition)
        self.menuExport.addAction(self.actionExportModification)
        self.toolBar.addAction(self.actionPreviousCell)
        self.toolBar.addAction(self.actionNextCell)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionComposeLayers)
        self.toolBar.addAction(self.actionAutoTextRemovalAndBlankAlignment)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionZoomOut)
        self.toolBar.addAction(self.actionZoomIn)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionPaintMask)
        self.toolBar.addAction(self.actionEraseMask)
        self.toolBar.addAction(self.actionEditBlank)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionUndo)
        self.toolBar.addAction(self.actionRedo)
        self.toolBar.addSeparator()
        self.toolBar.addAction(self.actionDiscard)

        self.retranslateUi(MainWindow)

        self.stackedWidget.setCurrentIndex(0)


        QMetaObject.connectSlotsByName(MainWindow)
    # setupUi

    def retranslateUi(self, MainWindow):
        MainWindow.setWindowTitle(QCoreApplication.translate("MainWindow", u"MainWindow", None))
        self.actionPreviousCell.setText(QCoreApplication.translate("MainWindow", u"previous cell", None))
#if QT_CONFIG(tooltip)
        self.actionPreviousCell.setToolTip(QCoreApplication.translate("MainWindow", u"previous cell", None))
#endif // QT_CONFIG(tooltip)
        self.actionNextCell.setText(QCoreApplication.translate("MainWindow", u"next cell", None))
#if QT_CONFIG(tooltip)
        self.actionNextCell.setToolTip(QCoreApplication.translate("MainWindow", u"next cell", None))
#endif // QT_CONFIG(tooltip)
        self.actionComposeLayers.setText(QCoreApplication.translate("MainWindow", u"compose layers", None))
#if QT_CONFIG(tooltip)
        self.actionComposeLayers.setToolTip(QCoreApplication.translate("MainWindow", u"compose layers", None))
#endif // QT_CONFIG(tooltip)
        self.actionRemoveText.setText(QCoreApplication.translate("MainWindow", u"Remove Text", None))
#if QT_CONFIG(tooltip)
        self.actionRemoveText.setToolTip(QCoreApplication.translate("MainWindow", u"Remove Text", None))
#endif // QT_CONFIG(tooltip)
        self.actionEditBlank.setText(QCoreApplication.translate("MainWindow", u"Edit Blank", None))
#if QT_CONFIG(tooltip)
        self.actionEditBlank.setToolTip(QCoreApplication.translate("MainWindow", u"Edit Blank", None))
#endif // QT_CONFIG(tooltip)
        self.actionZoomIn.setText(QCoreApplication.translate("MainWindow", u"Zoom In", None))
#if QT_CONFIG(tooltip)
        self.actionZoomIn.setToolTip(QCoreApplication.translate("MainWindow", u"Zoom In", None))
#endif // QT_CONFIG(tooltip)
        self.actionZoomOut.setText(QCoreApplication.translate("MainWindow", u"Zoom Out", None))
#if QT_CONFIG(tooltip)
        self.actionZoomOut.setToolTip(QCoreApplication.translate("MainWindow", u"Zoom Out", None))
#endif // QT_CONFIG(tooltip)
        self.actionPaintMask.setText(QCoreApplication.translate("MainWindow", u"Paint Mask", None))
#if QT_CONFIG(tooltip)
        self.actionPaintMask.setToolTip(QCoreApplication.translate("MainWindow", u"paint mask", None))
#endif // QT_CONFIG(tooltip)
        self.actionEraseMask.setText(QCoreApplication.translate("MainWindow", u"Erase Mask", None))
#if QT_CONFIG(tooltip)
        self.actionEraseMask.setToolTip(QCoreApplication.translate("MainWindow", u"Erase Mask", None))
#endif // QT_CONFIG(tooltip)
        self.actionDiscard.setText(QCoreApplication.translate("MainWindow", u"Discard", None))
#if QT_CONFIG(tooltip)
        self.actionDiscard.setToolTip(QCoreApplication.translate("MainWindow", u"Discard", None))
#endif // QT_CONFIG(tooltip)
        self.actionUndo.setText(QCoreApplication.translate("MainWindow", u"Undo", None))
#if QT_CONFIG(tooltip)
        self.actionUndo.setToolTip(QCoreApplication.translate("MainWindow", u"undo", None))
#endif // QT_CONFIG(tooltip)
        self.actionRedo.setText(QCoreApplication.translate("MainWindow", u"Redo", None))
#if QT_CONFIG(tooltip)
        self.actionRedo.setToolTip(QCoreApplication.translate("MainWindow", u"Redo", None))
#endif // QT_CONFIG(tooltip)
        self.actionAutoTextRemovalAndBlankAlignment.setText(QCoreApplication.translate("MainWindow", u"Auto Text Removal And Blank Alignment", None))
#if QT_CONFIG(tooltip)
        self.actionAutoTextRemovalAndBlankAlignment.setToolTip(QCoreApplication.translate("MainWindow", u"Auto Text Removal And Blank Alignment", None))
#endif // QT_CONFIG(tooltip)
        self.actionLoad.setText(QCoreApplication.translate("MainWindow", u"Load", None))
        self.actionSave.setText(QCoreApplication.translate("MainWindow", u"Save", None))
        self.actionall.setText(QCoreApplication.translate("MainWindow", u"all", None))
        self.actionmodification_only.setText(QCoreApplication.translate("MainWindow", u"modification only", None))
        self.actionExportComposition.setText(QCoreApplication.translate("MainWindow", u"final composition", None))
        self.actionExportModification.setText(QCoreApplication.translate("MainWindow", u"modification only", None))
        self.menuFile.setTitle(QCoreApplication.translate("MainWindow", u"File", None))
        self.menuExport.setTitle(QCoreApplication.translate("MainWindow", u"Export", None))
        self.toolBar.setWindowTitle(QCoreApplication.translate("MainWindow", u"toolBar", None))
    # retranslateUi

